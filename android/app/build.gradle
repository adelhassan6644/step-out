def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}


def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
// START: FlutterFire Configuration
apply plugin: 'com.google.gms.google-services'
// END: FlutterFire Configuration
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
//def keystoreProperties = new Properties()
//def keystorePropertiesFile = rootProject.file('key.properties')
//if (keystorePropertiesFile.exists()) {
//    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
//}

android {
    afterEvaluate {
        if(System.getenv("IS_CI_BUILD") == "true"){
            // if you are creating bundle for release build then task name below will be bundleRelease
            // if apk, then it will be assembleRelease
            // if any flavor then, for staging flavor it will be bundleStagingRelease and assembleStagingRelease respectively
            def bundleTask = project.tasks.findByName('assembleRelease')

            // Create a custom task to run after bundleRelease or assembleRelease
            task copyBuildTask(dependsOn: bundleTask) {
                // Configure your custom task here
                doLast {
                    // Code to run after bundleRelease or asssembleRelease for appcenter
                    println "Copying builds..."

                    // if any flavor then path will change accordingly, for staging it will be -
                    // def apkPath = file('../../build/app/outputs/flutter-apk/app-staging-release.apk')
                    def apkPath = file('../../build/app/outputs/flutter-apk/app-release.apk')
                    if(apkPath.exists()) {
                        def apkDir = file('build/outputs/apk/')
                        apkDir.mkdirs()
                        copy {
                            from apkPath.parent
                            into apkDir
                            include apkPath.name
                        }
                        println "Apk file moved to: ${apkDir}/${apkPath.name}"
                    }

                    // if any flavor then path will change accordingly, for staging it will be -
                    // def bundlePath = file('../../build/app/outputs/bundle/stagingRelease/app-staging-release.aab')
                    def bundlePath = file('../../build/app/outputs/bundle/release/app-release.aab')
                    if(bundlePath.exists()) {
                        def bundleDir = file('build/outputs/bundle/')
                        bundleDir.mkdirs()
                        copy {
                            from bundlePath.parent
                            into bundlePath
                            include bundlePath.name
                        }
                        println "AAB file moved to: ${bundleDir}/${bundlePath.name}"
                    }

                    // if any flavor then path will change accordingly, for staging it will be -
                    //def mappingPath = file('../../build/app/outputs/mapping/stagingRelease/mapping.txt')
                    def mappingPath = file('../../build/app/outputs/mapping/release/mapping.txt')
                    if(mappingPath.exists()) {
                        def mappingDir = file('build/outputs/mapping/')
                        mappingDir.mkdirs()
                        copy {
                            from mappingPath.parent
                            into mappingDir
                            include mappingPath.name
                        }
                        println "Mapping file moved to: ${mappingDir}/${mappingPath.name}"
                    }
                }
            }

            if(bundleTask != null) {
                bundleTask.finalizedBy(copyBuildTask)
            }
        }
    }

    compileSdkVersion 33
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.eBrandstepOut.stepOut"
        minSdkVersion 21
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation("androidx.multidex:multidex:2.0.1")
    implementation 'com.google.firebase:firebase-auth'
    implementation platform('com.google.firebase:firebase-bom:29.3.0')
    implementation 'com.google.firebase:firebase-messaging:23.1.2'
    implementation "com.google.android.material:material:1.8.0"
    def appCenterSdkVersion = '4.4.5'
    implementation "com.microsoft.appcenter:appcenter-analytics:${appCenterSdkVersion}"
    implementation "com.microsoft.appcenter:appcenter-crashes:${appCenterSdkVersion}"
}
